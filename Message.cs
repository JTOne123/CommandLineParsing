using System;

namespace CommandLineParsing
{
    /// <summary>
    /// Represents an error-message generated by a command or parameter.
    /// Strings are implicitly converted to <see cref="Message"/>.
    /// </summary>
    public abstract class Message
    {
        private static Message noError = new SimpleMessage();
        /// <summary>
        /// A unique <see cref="Message"/>, representing that no error has occured.
        /// When performing validations and no error error occurs this value should be returned.
        /// </summary>
        public static Message NoError
        {
            get { return noError; }
        }

        private bool isError;
        /// <summary>
        /// Gets a value indicating whether this <see cref="Message"/> is an error message.
        /// Only the <see cref="NoError"/> is not considered an error.
        /// </summary>
        /// <value>
        ///   <c>true</c> if this instance is error; otherwise, <c>false</c>.
        /// </value>
        public bool IsError
        {
            get { return isError; }
        }

        private Message(bool isError)
        {
            this.isError = isError;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Message"/> class, that is considered an error.
        /// </summary>
        protected Message()
            : this(true)
        {
        }

        /// <summary>
        /// Gets a string representing this <see cref="Message"/>.
        /// </summary>
        /// <returns></returns>
        public abstract string GetMessage();

        /// <summary>
        /// Performs an implicit conversion from <see cref="string"/> to <see cref="Message"/>.
        /// This allows for returning a <see cref="string"/> whenever a <see cref="Message"/> is required.
        /// </summary>
        /// <param name="message">The string message that should be converted into a <see cref="Message"/> element.</param>
        /// <returns>
        /// A <see cref="Message"/> where calling the <see cref="GetMessage"/> will return <paramref name="message"/>.
        /// </returns>
        public static implicit operator Message(string message)
        {
            return new SimpleMessage(message);
        }

        /// <summary>
        /// Combines two instances of <see cref="Message"/> into a new <see cref="Message"/>, joining them with a newline character.
        /// This represents the idea of printing one <see cref="Message"/> and then another.
        /// </summary>
        /// <param name="first">The first message.</param>
        /// <param name="second">The second message.</param>
        /// <returns>
        /// A new <see cref="Message"/> containing <paramref name="first"/> and <paramref name="second"/>.
        /// </returns>
        public static Message operator +(Message first, Message second)
        {
            if (first == null)
                throw new ArgumentNullException("first");
            if (second == null)
                throw new ArgumentNullException("second");

            if (!first.isError)
                return second;
            if (!second.isError)
                return first;

            return new ConcatenatedMessage(first, second);
        }

        private class SimpleMessage : Message
        {
            private string message;

            public SimpleMessage()
                : base(false)
            {
                this.message = "";
            }
            public SimpleMessage(string message)
            {
                this.message = message;
            }

            public override string GetMessage()
            {
                return message;
            }
        }

        private class ConcatenatedMessage : Message
        {
            private Message first, second;

            public ConcatenatedMessage(Message first, Message second)
            {
                this.first = first;
                this.second = second;
            }

            public override string GetMessage()
            {
                return first.GetMessage() + "\n" + second.GetMessage();
            }
        }
    }
}
